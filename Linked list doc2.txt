#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node*next;
    Node(int d){
        this->data=d;
        this->next=NULL;
    }
    ~Node(){
        int value=this->data;
        if(this->next!=NULL){
            delete next;
            next=NULL;
        }
        cout<<"Memory is free"<<value<<endl;
    }
};
void insertNode(Node*&tail,int element,int d){
    //assuming that the element is present in the list
    //empty list
    if(tail==NULL){
        Node*newnode=new Node(d);
        tail=newnode;
        newnode->next=newnode;
    }
    else{
        //non empty list
        Node*curr=tail;
        while(curr->data!=element){
            curr=curr->next;
        }//element found
        Node*temp=new Node(d);
        temp->next=curr->next;
        curr->next=temp;


    }
}
void print(Node*tail){
    Node*temp=tail;
    do{
        cout<<tail->data<<"";
        tail=tail->next;
    }while(tail!=temp);
    cout<<endl;
}
void deletenode(Node*&tail,int value){
    //empty list
    if(tail==NULL){
        cout<<"List is empty"<<endl;
    }else{
        //non empty
        Node*prev=tail;
        Node*curr=prev->next;
        while(curr->data!=value){
            prev=curr;
            curr=curr->next;
        }
        prev->next=curr->next;
        //1 Node linked list
        if(curr==prev){
            tail=NULL;
        }
        //>=2 Node linked list
        else if(tail==curr){
            tail=prev;
        }
        curr->next=NULL;
        delete curr;
    }
}

int main(){
    Node*tail=NULL;
    insertNode(tail,5,3);
    print(tail);
    insertNode(tail,3,5);
    print(tail);
    deletenode(tail,3);
    print(tail);
    return 0;
}

